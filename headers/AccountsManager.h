/**
 * @file AccountsManager.h
 * @author Lucio Luque (lucholuque98@gmail.com), Maximiliano Ra√∫l Malvicino (mrmalvicino@gmail.com)
 * @brief Manages the accounts of the accounting module.
 * @copyright GNU General Public License. Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 */

#pragma once
#include <iostream>
#include "Terminal.h"
#include "DateTime.h"
#include "Account.h"
#include "AccountsArchive.h"

class AccountsManager {
    public:

    /**
     * @brief Constructs a new AccountsManager object.
     */
    AccountsManager();

    /**
     * @brief Updates and returns the amount of accounts.
     * @return (int) Amount of accounting accounts.
     */
    int getAmountOfAccounts();

    /**
     * @brief Gets the type of the _account.
     * @return (int) Type of account.
     */
    int getAccountType();

    /**
     * @brief Gets the id of the _account.
     * @return (int) Autogenerated account number.
     */
    int getAccountId();

    /**
     * @brief Increase the account passive.
     * @param passive (double) Amount to be increased.
     */
    void updatePassive(double passive);

    /**
     * @brief Gets the passive of the _account.
     * @return (double) Liabilities of the account.
     */
    double getPassive();

    /**
     * @brief Increase the account active.
     * @param active (double) Amount to be increased.
     */
    void updateActive(double active);

    /**
     * @brief Gets the active of the _account.
     * @return (double) Assets of the account.
     */
    double getActive();

    /**
     * @brief Displays the accounts menu.
     */
    void displayMenu();

    /**
     * @brief Adds a new account to the _accounts_archive by prompting the user for inputs to collect various details of the account.
     * @return (bool) Returns true if the new account record is successfully added and otherwise, returns false.
     */
    bool addAccount();

    /**
     * @brief Adds a new account to the _accounts_archive.
     * @param id (int) Account id.
     * @param name (std::string) Account name.
     * @param type (int) Account type.
     * @param initial_balance (double) Account initial balance.
     * @return (bool) Returns true if the new account record is successfully added and otherwise, returns false.
     */
    bool addAccount(int id, std::string name, int type, double initial_balance);

    /**
     * @brief Allows editing an existing account's details interactively.
     * @return (bool) Returns true if the new account record is successfully edited and otherwise, returns false.
     */
    bool editAccount();

    /**
     * @brief Saves the current _account in the archive.
     * @return (bool) Returns true if the record was successfully saved and false otherwise.
     */
    bool updateAccount();

    /**
     * @brief Allows searching for an account with an interactive menu based on different criteria, including account ID and account name.
     * @return (int) Returns 0 if the search was successful or -1 is the search was aborted.
     */
    int searchAccount();

    /**
     * @brief Searches for an account by their unique ID and displays their details.
     * @return (int) Returns 0 if the search was successful or -1 is the search was aborted.
     */
    int searchAccountById();

    /**
     * @brief Searches for an account by their name and displays their details.
     * @return (int) Returns 0 if the search was successful or -1 is the search was aborted.
     */
    int searchAccountByName();

    /**
     * @brief Displays a menu with listing options.
     */
    void listAccountsMenu();

    /**
     * @brief Displays a list of all accounts stored in the account archive.
     * @param list_actives (bool) If true, active accounts will be printed.
     * @param list_inactives (bool) If true, inactive accounts will be printed.
     */
    void listAccounts(bool list_actives = true, bool list_inactives = true);

    /**
     * @brief Reads a register from the _accounts_archive.
     * @param index (int) The index of the account record to read.
     */
    void loadAccount(int index);

    /**
     * @brief Prints detailed information about the current _account.
     */
    void printAccount();

    /**
     * @brief Generates a unique account ID based on the current number of account records.
     * @return (int) The generated unique account ID.
     */
    int generateAccountId();

    /**
     * @brief Exports a binary file with a backup copy of the current _accounts_archive.
     */
    void exportAccountsBackup();

    /**
     * @brief Imports a backup copy by overwriting the current _accounts_archive.
     */
    void importAccountsBackup();

    /**
     * @brief Prompts the user to enter the name of the current _account.
     * @param cin_ignore 
     */
    void cinAccountName(bool cin_ignore = false);

    /**
     * @brief Prompts the user to enter the concept of the current _account.
     * @param cin_ignore 
     */
    void cinAccountConcept(bool cin_ignore = false);

    /**
     * @brief Prompts the user to enter the balance of the current _account.
     */
    void cinAccountBalance();

    /**
     * @brief Prompts the user to enter the type of the current _account.
     */
    void cinAccountType();

    /**
     * @brief Prompts the user to enter the status of the current _account.
     */
    void cinAccountStatus();

    private:

    /**
     * @brief Amount of accounting accounts.
     */
    int _amount_of_accounts;

    /**
     * @brief Terminal object with default settings.
     */
    Terminal _terminal;

    /**
     * @brief Account object with default settings.
     */
    Account _account;

    /**
     * @brief AccountsArchive object with default path.
     */
    AccountsArchive _accounts_archive;

    /**
     * @brief AccountsArchive object with custom path.
     */
    AccountsArchive _accounts_backup;
};